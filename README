JarchDVD 2.0 README

7/18/2011 update:

  This code is now also updated to carry a rewritten version of JarchCD.
  This means the one package now carries CD, and DVD ripping capabilities.
  For shell script use, the package also now carries a program that
  identifies the disc type (to stdout) and another program the shell script
  can use to wait until the drive is ready (since, apparently, Linux kernel
  won't wait for ready).

Why 2.0?

  Initially JarchDVD was written to rip the video content of DVDs.
  It originated as a kludge using Linux-specific ioctls() to authenticate
  as well as use of the traditional read() function. JarchDVD was
  originally inspired by the fact that a simple shell script combined
  with the decvob utility in the original DeCSS source code would
  fail and give up and provide incomplete rips at the first sign
  of a bad sector.

  Over time however with an increasing number of software packages
  being released on DVD-ROM it became more important to expand
  JarchDVD to rip the entire disc, just like JarchCD does.

The TODO list

  JarchDVD classic was designed to peform the same basic steps every
  run. This is actually unnecessary, and is a waste of time when
  re-running the ripper to fill in bad sectors. JarchDVD 2.0 solves
  this waste of time by maintaining a "TODO list". If it's already
  done it before it doesn't do it again unless asked to by the user
  (through the use of various command line switches).

Where are VIDEO_TS.VOB, VTS_01_1.VOB, and all those files?

  JarchDVD no longer rips the DVD video files to separate files on
  the hard drive. JarchDVD instead rips the data to a raw ISO file
  that you can then use to recreate the disc. The fact that it's
  a raw ISO means that all data is preserved from the disc.

  The problem with archiving DVD media is that it is possible
  (actually very likely) that a plain ISO would exceed 4.7GB
  (the maximum room offered by typical consumer DVD-R media).
  JarchDVD makes it easier to archive such large media by writing
  the ISO to disk as 512MB chunks. These chunks, when taken
  together, make up the ISO file.

Why doesn't JarchDVD automatically decrypt the DVD video data?

  JarchDVD is now built to focus on the first important goal of
  DVD ripping and archiving: getting the data. This keeps the
  ripping engine as simple as possible, and reduces the legal
  problems of using it by NOT decrypting the data. This does
  not mean that the data remains unplayable, as JarchDVD will
  later on gather all the title keys needed to decrypt the data
  and store them in a binary search tree.

What is a POI?

  POI is short for "Points of Interest". It is a binary search
  tree generated by JarchDVD based on "POI generators" that
  represents what sectors JarchDVD will gather title keys from.

  Currently only two POI generators are built-in:

  + The "Dumb" POI generator

    This POI generator starts at sector 0 and lists every Nth
    sector, where by default N = 16384. This allows JarchDVD
    to preserve any CSS keys that are NOT associated with
    the DVD video section of the disk and would therefore not
    be preserved by general DVD video ripping methods.

  + The DVD video POI generator

    This POI scans the UDF filesystem on DVD-ROM media for
    the file /VIDEO_TS/VIDEO_TS.IFO. If found, it uses the
    information in this file (normally used by your DVD player)
    to locate and list as POIs the starting sector of every
    DVD titleset. This differs from relying entirely on the
    UDF filesystem because DVD players, once having found
    VIDEO_TS.IFO, rely on these "pointers" in VIDEO_TS.IFO
    to find the DVD titlesets (it would probably be too much
    firmware bloat to implement a complex UDF reader that
    looks up every UDF file and reads titles even across
    non-contigious VOB files).

  By default only the DVD video POI generator is used. If
  ripping from your average DVD video disc this should
  suffice. If however you are ripping from DVD video discs
  that have "bonus features" in the form of PC DVD-ROM autorun
  features then you may want to consider the Dumb POI generator.

Can JarchDVD rip anything other than DVD videos?

  Yes. You can archive non-video DVDs as well as DVD-R,
  DVD+R, DVD-RW, DVD+RW, DVD+R DL, and (theoretically)
  DVD-RAM.

  It is possible also that you may be able to archive
  DVD audio discs, though JarchDVD does not know how to
  decrypt them. DVD audio discs (they say) use an alternate
  encryption method and authentication known as CPPM which
  JarchDVD may or may not support.

How does JarchDVD gather title keys?

  When gathering title keys JarchDVD will scan the POI
  tree and perform CSS authentication with every sector
  listed in that tree. If authentication succeeds, the
  title key obtained is stored in the Title Key tree
  for future reference (either by JarchDVD or other
  software).

  Depending on how many POIs were generated as well as
  your DVD-ROM drive this may take awhile. Basically
  how well this is done relies on two categories of
  DVD-ROM drive:

  Careless drives:

    Once a bus key has been negotiated, the drives will
    respond to all Title key requests without invalidating
    the bus key. With these drives JarchDVD can gather keys
    at a relatively quick pace and it should take no more
    than 5 seconds.

  Paranoid drives:

    These drives will negotiate a bus key during
    authentication, then allow the use of that bus key
    for ONE request (either Disc or Title key) before
    tossing the key away and denying further requests.
    JarchDVD can deal with these kinds of drives but that
    basically makes the full authentication process
    mandatory for EVERY disc or title key that JarchDVD
    gathers and is therefore a very slow way to gather
    title keys. Depending on how many POIs are involved
    this may take from 15 seconds up to 10 minutes.

  If your drive is not paranoid, JarchDVD can speed the
  ripping and gathering stages up by not re-negotiating
  the bus key.

How do I tell JarchDVD to decrypt the CSS protected DVD video data?

  Once the data has been ripped you can run JarchDVD again
  using the -decss switch. Using the -decss switch causes
  JarchDVD to skip all the steps and go directly to decrypting
  the data. When using -decss you do not need to have the
  original DVD in the DVD-ROM drive (thus allowing you to
  begin ripping another DVD on another console at the same
  time that JarchDVD on the current console is decrypting
  the last DVD you ripped).

  NOTE: Make sure that all title keys have been properly
        collected, all POIs have been checked, and that
        all of the data (or as much as possible) has been
        ripped! Failure to obtain all title keys may result
        in JarchDVD decrypting the DVD video data using the
        wrong key rendering the data unplayable (perhaps
        lost forever). In fact, this is precisely why I
        designed JarchDVD to NOT decrypt automatically in
        the first place!

How do I force JarchDVD to re-check the POIs?

  Use the -poi option. To force re-gathering of title keys,
  use the -authpoi option. Note that once a POI has been
  checked by the title key harvester it will not check it
  again even with -poi and -authpoi. To force this,
  manually delete the file "JarchDVD-POI.keystore" and run
  JarchDVD with the -poi and -authpoi switches again. If
  any title keys have been gathered incorrectly you may need
  to also delete the file "JarchDVD-Title.keystore" and
  re-run JarchDVD.

All title keys have been collected, all POIs checked and ripping finished but X
sectors were bad. I can't recover them. Does that mean I can't use -decss?

  Not at all. The danger of decrypting the data incorrectly
  comes from the failure to collect all title keys. A few
  lost sectors does not prevent proper decryption. If however
  you later on manage to recover those sectors you will need
  to run JarchDVD2 with -decss to decrypt the newly recovered
  sectors.

What does the -cmi switch do?

  The CMI switch tells JarchDVD to rip the 4 bytes of Copyright
  Management Information associated with each sector (although
  in current standards only one byte is used). This can be a
  waste of time and is therefore not done by default.

